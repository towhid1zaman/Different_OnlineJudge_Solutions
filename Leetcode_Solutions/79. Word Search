class Solution {
public:
    bool dfs(int row, int col,vector<vector<char>>& board, string word, int point){
        if(point == word.size())return true;
        if(row < 0 or col < 0 or row >= board.size() or col>=board[0].size())return false;
        if(board[row][col] != word[point])return false;
        
        // match
        board[row][col] = '#';
        bool all_possible = dfs(row+1, col, board, word, point+1) ||
                            dfs(row-1,col, board, word, point+1) ||
                            dfs(row, col+1, board, word, point+1) ||
                            dfs(row, col-1, board, word, point+1);
        board[row][col] = word[point]; // backtrack
        return all_possible;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n = (int)board.size();
        int m = (int)board[0].size();
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(dfs(i,j,board,word,0))return true;
            }
        }
        return false;
    }
};
